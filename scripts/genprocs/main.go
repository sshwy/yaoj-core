// generate processor's label code in processor/builtins.go
package main

import (
	"flag"
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/sshwy/yaoj-core/pkg/private/processors"
	"github.com/sshwy/yaoj-core/pkg/utils"
)

func renderStr(s string) string {
	return "`" + s + "`"
}
func renderStrArray(s []string) string {
	s1 := utils.Map(s, renderStr)
	return "[]string{" + strings.Join(s1, ",") + "}"
}

var start = `
package processor

// generated by scripts/genprocs
func init() {
`

var end = `}
`

func main() {
	flag.Parse()
	procs := processors.GetAll()
	file, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	file.WriteString(start)
	var names = []string{}
	for name := range procs {
		names = append(names, name)
	}
	sort.Slice(names, func(i, j int) bool {
		return names[i] < names[j]
	})
	for _, name := range names {
		inlab, oulab := procs[name].Label()
		fmt.Fprintf(file, "\tinLabel[%s]=%s\n", renderStr(name), renderStrArray(inlab))
		fmt.Fprintf(file, "\touLabel[%s]=%s\n", renderStr(name), renderStrArray(oulab))
	}
	file.WriteString(end)
}

var filename string

func init() {
	flag.StringVar(&filename, "path", "", "path")
}
